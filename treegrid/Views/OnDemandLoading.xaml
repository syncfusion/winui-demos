<Page
    x:Class="TreeGrid.OnDemandLoading"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:TreeGrid"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:core="using:Syncfusion.UI.Xaml.Core"
    xmlns:treeGrid="using:Syncfusion.UI.Xaml.TreeGrid"
    xmlns:grid="using:Syncfusion.UI.Xaml.Grids"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    mc:Ignorable="d"
    Background="Transparent">
    <Page.DataContext>
        <local:EmployeeViewModel/>
    </Page.DataContext>
    <Page.Resources>
        <local:Commands x:Key="command" />
        <local:EmployeeViewModel x:Key="employeeViewModel"/>
    </Page.Resources> 
    <Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto">
            <StackPanel>
                <common:DemoLayout x:Name="Example1" HeaderText="This sample showcases loading data on demand in a tree grid.">
                    <common:DemoLayout.Example>
                        <treeGrid:SfTreeGrid
                        x:Name="sfTreeGrid"
                        Height="450"
                        Width="Auto"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        AutoExpandMode="RootNodesExpanded"
                        AutoGenerateColumns="False"                        
                        ColumnWidthMode="Auto"
                        GridLinesVisibility="{Binding SelectedValue, Converter={common:StringToEnumValueConverter IsInversed=True,Type=grid:GridLinesVisibility}, ElementName=gridLinesVisibility}"
                        HeaderLinesVisibility="{Binding SelectedValue, Converter={common:StringToEnumValueConverter IsInversed=True,Type=grid:GridLinesVisibility}, ElementName=headerLinesVisibility}"
                        ItemsSource="{Binding Employees}">

                            <treeGrid:SfTreeGrid.Columns>
                                <treeGrid:TreeGridTextColumn HeaderText="First Name" MappingName="FirstName" />
                                <treeGrid:TreeGridTextColumn HeaderText="Last Name" MappingName="LastName" />
                                <treeGrid:TreeGridNumericColumn HeaderText="Employee ID" MappingName="ID" TextAlignment="Right" />
                                <treeGrid:TreeGridTextColumn MappingName="Title" />
                                <treeGrid:TreeGridDateColumn
                                                           HeaderText="Date of Joining"
                                                           MappingName="DOJ"
                                                           TextAlignment="Right" />
                                <treeGrid:TreeGridNumericColumn NumberFormatter="{Binding SystemCurrency,Source={StaticResource employeeViewModel}}"  
                                                           MappingName="Salary"
                                                           TextAlignment="Right"/>
                                <treeGrid:TreeGridNumericColumn HeaderText="Reports To" MappingName="ReportsTo" TextAlignment="Right"/>
                            </treeGrid:SfTreeGrid.Columns>
                        </treeGrid:SfTreeGrid>
                    </common:DemoLayout.Example>
                    <common:DemoLayout.Options>
                        <StackPanel Orientation="Vertical">
                            <TextBlock
                             Margin="16,5,5,5"
                            FontSize="14"
                            FontWeight="Bold"
                            Text="Options" />
                            <Button x:Name="btnExpand"
                             Margin="16,5,5,5"
                            Command="{Binding ExpandCommand, Source={StaticResource command}}"
                            CommandParameter="{Binding ElementName=sfTreeGrid}"
                            Content="Expand All Nodes" />
                            <Button x:Name="btnCollapse"
                             Margin="16,5,5,5"
                            Command="{Binding CollapseCommand, Source={StaticResource command}}"
                            CommandParameter="{Binding ElementName=sfTreeGrid}"
                            Content="Collapse All Nodes" />
                            <ComboBox
                            x:Name="gridLinesVisibility"
                            Margin="16,5,5,5"
                            Header="GridLinesVisibility"
                            ItemsSource="{common:EnumToStringValuesExtension Type=grid:GridLinesVisibility}"
                            SelectedIndex="3">
                            </ComboBox>
                            <ComboBox
                            x:Name="headerLinesVisibility"
                            Margin="16,5,5,5"
                            Header="HeaderLinesVisibility"
                            ItemsSource="{common:EnumToStringValuesExtension Type=grid:GridLinesVisibility}"
                            SelectedIndex="0">
                            </ComboBox>
                        </StackPanel>
                    </common:DemoLayout.Options>
                    <common:DemoLayout.Xaml>
                        <x:String xml:space="preserve">
    &lt;treeGrid:SfTreeGrid Name=&quot;sfTreeGrid&quot;
                              Width=&quot;Auto&quot;
                              HorizontalAlignment=&quot;Left&quot;
                              AutoExpandMode=&quot;RootNodesExpanded&quot;
                              AutoGenerateColumns=&quot;True&quot;                                                          
                              ColumnWidthMode=&quot;AutoLastColumnFill&quot;                              
                              GridLinesVisibility=&quot;$(OnDemandGridLinesVisibility)&quot;
                              HeaderLinesVisibility=&quot;$(OnDemandHeaderLinesVisibility)&quot;
                              ItemsSource=&quot;{Binding Employees}&quot; /&gt;
                    </x:String>
                    </common:DemoLayout.Xaml>
                    <common:DemoLayout.Substitutions>
                        <common:DemoLayoutSubstitution
                        Key="OnDemandGridLinesVisibility"
                        SubstitutionValue="{x:Bind sfTreeGrid.GridLinesVisibility, Mode=OneWay}" />
                        <common:DemoLayoutSubstitution
                        Key="OnDemandHeaderLinesVisibility"
                        SubstitutionValue="{x:Bind sfTreeGrid.HeaderLinesVisibility, Mode=OneWay}" />
                    </common:DemoLayout.Substitutions>
                    <common:DemoLayout.CSharp>
                        <x:String xml:space="preserve">
//C# Code behind
                    
        private void SfTreeGrid_Unloaded(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)
        {
            this.sfTreeGrid.RequestTreeItems -= treeGrid_RequestChildSource;
            this.sfTreeGrid.RepopulateTree();
        }
                    
        private void SfTreeGrid_Loaded(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)
        {
            this.sfTreeGrid.RequestTreeItems += treeGrid_RequestChildSource;
            this.sfTreeGrid.RepopulateTree();
        }
                    
        private void treeGrid_RequestChildSource(object sender, Syncfusion.UI.Xaml.TreeGrid.TreeGridRequestTreeItemsEventArgs e)
        {
            if (e.ParentItem == null)
            {
                //get the root list - get all employees who have no boss 
                e.ChildItems = viewModel.Employees.Where(x => x.ReportsTo == -1); //get all employees whose boss's id is -1 (no boss)
            }
            else //if ParentItem not null, then set args.ChildList to the child items for the given ParentItem.
            {   //get the children of the parent object
                Employee emp = e.ParentItem as Employee;
                if (emp != null)
                {
                    //get all employees that report to the parent employee
                    e.ChildItems = viewModel.GetReportees(emp.ID);
                }
            }
        }
                        </x:String>
                    </common:DemoLayout.CSharp>
                </common:DemoLayout>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
