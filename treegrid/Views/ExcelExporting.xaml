<Page
    x:Class="TreeGrid.ExcelExporting"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:local="using:TreeGrid"
    xmlns:treeGrid="using:Syncfusion.UI.Xaml.TreeGrid"    
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:grid="using:Syncfusion.UI.Xaml.Grids"
    mc:Ignorable="d"
    Background="Transparent">
    <Page.Resources>
        <local:EmployeeViewModel x:Key="employeeViewModel"/>
    </Page.Resources>
    <Grid x:Name="grid" DataContext="{StaticResource employeeViewModel}">
        <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto">
            <StackPanel>
                <common:DemoLayout x:Name="Example1" HeaderText="This sample showcases the excel exporting capability of TreeGrid.">
                    <common:DemoLayout.Example>
                        <treeGrid:SfTreeGrid
                        x:Name="sfTreeGrid"
                        Height="490"
                        Width="Auto"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"                        
                        AutoExpandMode="RootNodesExpanded"
                        AutoGenerateColumns="False"
                        ChildPropertyName="ReportsTo"
                        ColumnWidthMode="Auto"                        
                        ItemsSource="{Binding Employees}"
                        LiveNodeUpdateMode="AllowDataShaping"
                        ParentPropertyName="ID"
                        SelfRelationRootValue="-1">
                            <treeGrid:SfTreeGrid.StackedHeaderRows>
                                <grid:StackedHeaderRow>
                                    <grid:StackedHeaderRow.StackedColumns>
                                        <grid:StackedColumn ChildColumns="FirstName,LastName" HeaderText="Employee Name" />
                                        <grid:StackedColumn ChildColumns="ID,DOJ" HeaderText="Employee Details" />
                                        <grid:StackedColumn ChildColumns="Salary,Department" HeaderText="Designation Details" />
                                    </grid:StackedHeaderRow.StackedColumns>
                                </grid:StackedHeaderRow>
                            </treeGrid:SfTreeGrid.StackedHeaderRows>
                            <treeGrid:SfTreeGrid.Columns>
                                <treeGrid:TreeGridTextColumn HeaderText="First Name" MappingName="FirstName" />
                                <treeGrid:TreeGridTextColumn HeaderText="Last Name" MappingName="LastName" />
                                <treeGrid:TreeGridNumericColumn HeaderText="Employee ID" MappingName="ID" />
                                <treeGrid:TreeGridDateColumn HeaderText="Date of Birth" MappingName="DOJ" TextAlignment="Right"/>
                                <treeGrid:TreeGridNumericColumn HeaderText="Salary" MappingName="Salary" 
                                                            DisplayNumberFormat="C2" />
                                <treeGrid:TreeGridTextColumn HeaderText="Department" MappingName="Department" />
                            </treeGrid:SfTreeGrid.Columns>
                        </treeGrid:SfTreeGrid>
                    </common:DemoLayout.Example>
                    <common:DemoLayout.Options>
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel>
                                <StackPanel>
                                    <TextBlock Margin="16,5,5,5" Text="Export TreeGrid to Excel" 
                                               FontWeight="Bold" />
                                    <CheckBox   x:Name="exportStackedHeaders"
                                            Margin="16,5,5,5"
                                            Content="Export stacked headers"
                                            IsChecked="True" />
                                    <CheckBox   x:Name="headerStyle"
                                            Margin="16,5,5,5"
                                            Content="Custom styling for the headers"
                                            IsChecked="True" />
                                    <CheckBox   x:Name="columnStyle"
                                            Margin="16,5,5,5"
                                            Content="Custom styling for the column &quot;Employee ID&quot;"
                                            IsChecked="True" />
                                    <TextBlock Margin="16,5,5,5" Text="Columns" FontWeight="Bold" />
                                    <CheckBox   x:Name="firstName"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="First Name" />
                                    <CheckBox   x:Name="lastName"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Last Name" />
                                    <CheckBox   x:Name="employeeID"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Employee ID" />
                                    <CheckBox   x:Name="dateofBirth"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Date of Birth" />
                                    <CheckBox   x:Name="salary"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Salary" />
                                    <CheckBox   x:Name="department"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Department" />
                                    <Button     x:Name="exportTreeGrid" 
                                                HorizontalContentAlignment="Center"
                                            Margin="16,5,5,5" Width="180"
                                            Click="exportingTreeGrid_Click"
                                            Content="Export To Excel" />
                                </StackPanel>
                            </StackPanel>
                        </ScrollViewer>
                    </common:DemoLayout.Options>
                    <common:DemoLayout.Xaml>
                        <x:String xml:space="preserve">
&lt;treeGrid:SfTreeGrid Name=&quot;sfTreeGrid&quot;
                               Height=&quot;520&quot;
                               Width=&quot;Auto&quot;
                               HorizontalAlignment=&quot;Left&quot;
                               AutoExpandMode=&quot;RootNodesExpanded&quot;
                               AutoGenerateColumns=&quot;True&quot;
                               ChildPropertyName=&quot;ReportsTo&quot;
                               ParentPropertyName=&quot;ID&quot;
                               SelfRelationRootValue=&quot;-1&quot;
                               ColumnWidthMode=&quot;Auto&quot;
                               ItemsSource=&quot;{Binding Employees}&quot;
                               LiveNodeUpdateMode=&quot;AllowDataShaping&quot;&gt;
    &lt;treeGrid:SfTreeGrid.StackedHeaderRows&gt;
        &lt;grid:StackedHeaderRow&gt;
            &lt;grid:StackedHeaderRow.StackedColumns&gt;
                &lt;grid:StackedColumn ChildColumns=&quot;FirstName,LastName&quot; HeaderText=&quot;Employee Name&quot; /&gt;
                &lt;grid:StackedColumn ChildColumns=&quot;ID,DateofBirth&quot; HeaderText=&quot;Employee Details&quot; /&gt;
                &lt;grid:StackedColumn ChildColumns=&quot;Salary,Department&quot; HeaderText=&quot;Designation Details&quot; /&gt;
            &lt;/grid:StackedHeaderRow.StackedColumns&gt;
        &lt;/grid:StackedHeaderRow&gt;
    &lt;/treeGrid:SfTreeGrid.StackedHeaderRows&gt;
&lt;/treeGrid:SfTreeGrid&gt;
                </x:String>
                    </common:DemoLayout.Xaml>
                    <common:DemoLayout.CSharp>
                        <x:String xml:space="preserve"> 
                        //C# code behind

        private void exportingTreeGrid_Click(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)
        {
            var options = new TreeGridExcelExportOptions();
            options.ExcelVersion = ExcelVersion.Excel2013;
            options.CanExportStackedHeaders = exportStackedHeaders.IsChecked == true;

            if (columnStyle.IsChecked == true)
                options.CellsExportHandler = CellsExportHandler;

            if (headerStyle.IsChecked == true)
                options.GridExportHandler = GridExportHandler;

            if (firstName.IsChecked == false)
                options.ExcludedColumns.Add("FirstName");

            if (lastName.IsChecked == false)
                options.ExcludedColumns.Add("LastName");

            if (employeeID.IsChecked == false)
                options.ExcludedColumns.Add("EmployeeID");

            if (dateofBirth.IsChecked == false)
                options.ExcludedColumns.Add("DateofBirth");

            if (salary.IsChecked == false)
                options.ExcludedColumns.Add("Salary");

            if (department.IsChecked == false)
                options.ExcludedColumns.Add("Department");

            var excelEngine = sfTreeGrid.ExportToExcel(options);
            var workBook = excelEngine.Excel.Workbooks[0];
            MemoryStream outputStream = new MemoryStream();
            workBook.SaveAs(outputStream);
            Save(outputStream, "EmployeeDetails");
        }

        private void GridExportHandler(object sender, TreeGridExcelExportStartOptions e)
        {
            if (e.CellType == ExportCellType.HeaderCell || e.CellType == ExportCellType.StackedHeaderCell)
            {
                e.Style.Color = Color.Red;
                e.Style.Font.Color = ExcelKnownColors.White;
                e.Handled = true;
            }
        }

        private void CellsExportHandler(object sender, TreeGridCellExcelExportOptions e)
        {
            if (e.ColumnName == "EmployeeID")
            {
                e.Range.CellStyle.ColorIndex = ExcelKnownColors.Blue_grey;
                e.Range.CellStyle.Font.Color = ExcelKnownColors.Light_yellow;
            }

        }
                        
        async void Save(MemoryStream stream, string filename)
        {
            StorageFile stFile;
            if (!(Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.Phone.UI.Input.HardwareButtons")))
            {
                FileSavePicker savePicker = new FileSavePicker();
                savePicker.DefaultFileExtension = ".xlsx";
                savePicker.SuggestedFileName = filename;
                savePicker.FileTypeChoices.Add("Excel Documents", new List&lt;string&gt;() { ".xlsx" });
                var hwnd = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
                WinRT.Interop.InitializeWithWindow.Initialize(savePicker, hwnd);
                stFile = await savePicker.PickSaveFileAsync();
            }
            else
            {
                StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder;
                stFile = await local.CreateFileAsync(filename, CreationCollisionOption.ReplaceExisting);
            }
            if (stFile != null)
            {
                using (IRandomAccessStream zipStream = await stFile.OpenAsync(FileAccessMode.ReadWrite))
                {
                    //Write compressed data from memory to file
                    using (Stream outstream = zipStream.AsStreamForWrite())
                    {
                        byte[] buffer = stream.ToArray();
                        outstream.Write(buffer, 0, buffer.Length);
                        outstream.Flush();
                    }
                }
            //Launch the saved Excel file
            await Windows.System.Launcher.LaunchFileAsync(stFile);
            }
        }
                        </x:String>
                    </common:DemoLayout.CSharp>
                </common:DemoLayout>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>

