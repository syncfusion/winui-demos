<Page
    x:Class="TreeGrid.ConditionalStyling"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:TreeGrid"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:treeGrid="using:Syncfusion.UI.Xaml.TreeGrid"
    Background="Transparent"
    mc:Ignorable="d">
    <Page.Resources>
        <local:EmployeeViewModel x:Key="employeeViewModel" />  
        <local:CellStyleSelector x:Key="styleSelector" /> 
        <Style x:Key="darkRedCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#f50602"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="redCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#e37b64"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightRedCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#f07d9b"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style> 
        <Style x:Key="darkVioletCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#6f0e82"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="violetCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#b464c4"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightVioletCellStyle" TargetType="treeGrid:TreeGridCell">
            <Setter Property="Background" Value="#e4b4ed"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style> 
    </Page.Resources>
    <Grid DataContext="{StaticResource employeeViewModel}">
        <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto">
            <StackPanel>
                <common:DemoLayout x:Name="Example1" HeaderText="This sample showcases the conditional formatting capability of the TreeGrid. You can format the styles of cells based on certain conditions by using StyleSelector.">
                    <common:DemoLayout.Example>
                        <treeGrid:SfTreeGrid
                        x:Name="sfTreeGrid"
                        Height="450"
                        Width="Auto"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top" 
                        AutoExpandMode="RootNodesExpanded"
                        AutoGenerateColumns="False"
                        ChildPropertyName="ReportsTo"
                        ColumnWidthMode="Auto"
                        ItemsSource="{Binding Employees}" 
                        ParentPropertyName="ID"
                        SelfRelationRootValue="-1"
                        CellStyleSelector="{StaticResource styleSelector}"
                        GridLinesVisibility="Both">  
                            <treeGrid:SfTreeGrid.Columns>
                                <treeGrid:TreeGridTextColumn HeaderText="First Name" MappingName="FirstName" />
                                <treeGrid:TreeGridTextColumn HeaderText="Last Name" MappingName="LastName"   />
                                <treeGrid:TreeGridNumericColumn HeaderText="Employee ID" TextAlignment="Right" MappingName="ID" />
                                <treeGrid:TreeGridTextColumn MappingName="Title"  /> 
                                <treeGrid:TreeGridNumericColumn MappingName="Salary" Width="105" NumberFormatter="{Binding SystemCurrency,Source={StaticResource employeeViewModel}}" TextAlignment="Right"/>
                                <treeGrid:TreeGridDateColumn HeaderText="Date of Joining" MappingName="DOJ" TextAlignment="Right" /> 
                                <treeGrid:TreeGridNumericColumn HeaderText="Reports To" MappingName="ReportsTo" TextAlignment="Right" />
                            </treeGrid:SfTreeGrid.Columns>
                        </treeGrid:SfTreeGrid>
                    </common:DemoLayout.Example> 
                    <common:DemoLayout.Xaml>
                        <x:String xml:space="preserve"> 
    &lt;Page.Resources&gt;  
        &lt;local:CellStyleSelector x:Key=&quot;styleSelector&quot; /&gt; 
        
        &lt;Style x:Key=&quot;darkRedCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f50602&quot;/&gt;
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;redCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#e37b64&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightRedCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f07d9b&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt; 
        &lt;Style x:Key=&quot;darkVioletCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#6f0e82&quot;/&gt;
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;violetCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#b464c4&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;      
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightVioletCellStyle&quot; TargetType=&quot;treeGrid:TreeGridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#e4b4ed&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
    &lt;/Page.Resources&gt;  
     &lt;treeGrid:SfTreeGrid x:Name=&quot;sfTreeGrid&quot;
                                 Height=&quot;450&quot;
                                 Width=&quot;Auto&quot;
                                 HorizontalAlignment=&quot;Left&quot;
                                 VerticalAlignment=&quot;Top&quot; 
                                 AutoExpandMode=&quot;RootNodesExpanded&quot;
                                 AutoGenerateColumns=&quot;True&quot;
                                 ChildPropertyName=&quot;ReportsTo&quot;
                                 ColumnWidthMode=&quot;Auto&quot;
                                 ItemsSource=&quot;{Binding Employees}&quot; 
                                 ParentPropertyName=&quot;ID&quot;
                                 SelfRelationRootValue=&quot;-1&quot;
                                 CellStyleSelector=&quot;{StaticResource styleSelector}&quot;
                                 GridLinesVisibility=&quot;Both&quot;/&gt;  
                        </x:String>
                    </common:DemoLayout.Xaml>
                    <common:DemoLayout.CSharp>
                        <x:String xml:space="preserve"> 
    //C# code behind
    public class CellStyleSelector : StyleSelector
    {
        internal ConditionalStyling conditionalStyling;

        protected override Style SelectStyleCore(object item, DependencyObject container)
        { 
            var data = item as Employee;

            if (conditionalStyling == null)
                conditionalStyling = (ConditionalStyling)Activator.CreateInstance(typeof(ConditionalStyling));

           if(data!=null)
            {
                var mappingName = (container as TreeGridCell).ColumnBase.TreeGridColumn.MappingName;
                            
                if (mappingName == &quot;Salary&quot;)
                {
                    if (data.Salary &lt; 100000 &amp;&amp; data.Salary &gt; 50000)
                        return conditionalStyling.Resources[&quot;darkRedCellStyle&quot;] as Style;
                    else if (data.Salary &lt; 50000 &amp;&amp; data.Salary &gt; 10000)
                        return conditionalStyling.Resources[&quot;redCellStyle&quot;] as Style;
                    else
                        return conditionalStyling.Resources[&quot;lightRedCellStyle&quot;] as Style;
                } 
                else if (mappingName == &quot;Title&quot;)
                {
                    if (data.Title == &quot;Engineering Manager&quot; || data.Title== &quot;Production Control Manager&quot; || data.Title == &quot;Recruiter&quot; || data.Title == &quot;Information Services Manager&quot; || data.Title == &quot;Master Scheduler&quot;)
                        return conditionalStyling.Resources[&quot;darkVioletCellStyle&quot;] as Style;
                    else if (data.Title == &quot;Network Administrator&quot; || data.Title == &quot;Marketing Specialist&quot; || data.Title == &quot;Quality Assurance Supervisor&quot; || data.Title == &quot;Maintenance Supervisor&quot;)
                        return conditionalStyling.Resources[&quot;violetCellStyle&quot;] as Style;
                    else
                        return conditionalStyling.Resources[&quot;lightVioletCellStyle&quot;] as Style;
                }
            } 
            return base.SelectStyleCore(item, container);
        }
    }
                        </x:String>
                    </common:DemoLayout.CSharp>
                </common:DemoLayout>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
