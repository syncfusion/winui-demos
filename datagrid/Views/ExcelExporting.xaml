<Page
    x:Class="DataGrid.ExcelExporting"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:DataGrid"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:dataGrid="using:Syncfusion.UI.Xaml.DataGrid"
    xmlns:grid="using:Syncfusion.UI.Xaml.Grids"
    mc:Ignorable="d"
    Background="Transparent">
    
    <Page.Resources>
        <local:OrderInfoViewModel x:Key="orderInfoViewModel"/>
    </Page.Resources>
    <Grid DataContext="{StaticResource orderInfoViewModel}">
        <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto">
            <StackPanel>
                <common:DemoLayout x:Name="Example1" HeaderText="This sample showcases the excel exporting capability of DataGrid.">
                    <common:DemoLayout.Example>
                        <dataGrid:SfDataGrid x:Name="sfDataGrid"
                            AllowSorting="True"
                            Height="685"
                            Width="Auto"
                            SelectionMode="Multiple"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            AutoGenerateColumns="False"
                            ColumnWidthMode="AutoLastColumnFill"
                            SelectionChanged="sfDataGrid_SelectionChanged"
                            QueryUnboundRow="sfDataGrid_QueryUnboundRow"
                            Loaded="sfDataGrid_Loaded"
                            ItemsSource="{Binding OrdersDetails}">
                            <dataGrid:SfDataGrid.UnboundRows>
                                <dataGrid:GridUnboundRow  Position="Top" ShowBelowSummary="True"/>
                            </dataGrid:SfDataGrid.UnboundRows>
                            <dataGrid:SfDataGrid.StackedHeaderRows>
                                <grid:StackedHeaderRow>
                                    <grid:StackedHeaderRow.StackedColumns>
                                        <grid:StackedColumn ChildColumns="OrderID,OrderDate" HeaderText="Order Details" />
                                        <grid:StackedColumn ChildColumns="Quantity,UnitPrice" HeaderText="Product Details" />
                                        <grid:StackedColumn ChildColumns="ShipCity,ShipAddress" HeaderText="Shipping Details" />
                                    </grid:StackedHeaderRow.StackedColumns>
                                </grid:StackedHeaderRow>
                            </dataGrid:SfDataGrid.StackedHeaderRows>
                            <dataGrid:SfDataGrid.Columns>
                                <dataGrid:GridNumericColumn HeaderText="Order ID" MappingName="OrderID" TextAlignment="Right"/>
                                <dataGrid:GridDateColumn MappingName="OrderDate"
                                    HeaderText="Order Date"
                                    TextAlignment="Right" />
                                <dataGrid:GridTextColumn HeaderText="Shipping City" MappingName="ShipCity" />
                                <dataGrid:GridTextColumn HeaderText="Shipping Country" MappingName="ShipAddress" />
                                <dataGrid:GridTextColumn HeaderText="Quantity" MappingName="Quantity" TextAlignment="Right"/>
                                <dataGrid:GridNumericColumn HeaderText="Unit Price" MappingName="UnitPrice" DisplayNumberFormat="C2" Width="165" />
                            </dataGrid:SfDataGrid.Columns>
                        </dataGrid:SfDataGrid>
                    </common:DemoLayout.Example>
                    <common:DemoLayout.Options>
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel>
                                <StackPanel>
                                    <TextBlock Margin="16,5,5,5" Text="Export DataGrid to Excel" 
                                               FontWeight="Bold" />
                                    <CheckBox   x:Name="ExportStackedHeaders"
                                            Margin="16,5,5,5"
                                            Content="Export stacked headers"
                                            IsChecked="True" />
                                    <CheckBox   x:Name="ExportUnboundRows"
                                            Margin="16,5,5,5"
                                            Content="Export unbound rows"
                                            IsChecked="True" />
                                    <CheckBox   x:Name="ColumnStyle"
                                            Margin="16,5,5,5"
                                            Content="Custom styling for the column &quot;Unit Price&quot;"
                                            IsChecked="True" />
                                    <TextBlock Margin="16,5,5,5" Text="Columns" FontWeight="Bold" />
                                    <CheckBox   x:Name="OrderIDColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Order ID" />
                                    <CheckBox   x:Name="OrderDateColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Order Date" />
                                    <CheckBox   x:Name="ShippingCityColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Shipping City" />
                                    <CheckBox   x:Name="ShippingCountryColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Shipping Country" />
                                    <CheckBox   x:Name="QuantityColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Quantity" />
                                    <CheckBox   x:Name="UnitPriceColumn"
                                            Margin="16,5,5,5"
                                            IsChecked="True"
                                            Content="Unit Price" />
                                    <Button     x:Name="exportDataGrid" 
                                                HorizontalContentAlignment="Center"
                                            Margin="16,5,5,5" Width="180"
                                            Click="exportingDataGrid_Click"
                                            Content="Export To Excel" />
                                    <NavigationViewItemSeparator Margin="0,10,0,10"  />
                                    <TextBlock Margin="16,5,5,5" Text="Export Selected Rows to Excel" 
                                               FontWeight="Bold" />
                                    <CheckBox   x:Name="CellStyle"
                                            Margin="16,5,5,5"
                                            Content="Customize row style"
                                            IsChecked="True" />
                                    <Button     x:Name="exportSelectedItems"
                                                IsEnabled="False"
                                                HorizontalContentAlignment="Center"
                                            Margin="16,5,5,5" Width="180"
                                            Click="exportSelectedItems_Click"
                                            Content="Export Selected Rows" />
                                    <TextBlock Margin="16,5,5,5" Width="250"
                                               x:Name="NoteTextBlock" 
                                               HorizontalAlignment="Left"
                                               Text="Note: This button will be enabled only when the DataGrid rows are selected." 
                                               TextWrapping="WrapWholeWords" />
                                </StackPanel>
                            </StackPanel>
                        </ScrollViewer>
                    </common:DemoLayout.Options>
                    <common:DemoLayout.Xaml>
                        <x:String xml:space="preserve">
     &lt;dataGrid:SfDataGrid x:Name=&quot;sfDataGrid&quot;
                               AllowSorting=&quot;True&quot;
                               Height=&quot;500&quot;
                               Width=&quot;Auto&quot;
                               SelectionMode=&quot;Multiple&quot;
                               HorizontalAlignment=&quot;Left&quot;
                               VerticalAlignment=&quot;Top&quot;
                               AutoGenerateColumns=&quot;True&quot;
                               ColumnWidthMode=&quot;AutoLastColumnFill&quot;
                               ItemsSource=&quot;{Binding OrdersDetails}&quot;&gt;
        &lt;dataGrid:SfDataGrid.UnboundRows &gt;
            &lt;dataGrid:GridUnboundRow Position=&quot;Top&quot; ShowBelowSummary=&quot;True&quot;/&gt;
        &lt;/dataGrid:SfDataGrid.UnboundRows &gt;
        &lt;dataGrid:SfDataGrid.StackedHeaderRows&gt;
           &lt;grid:StackedHeaderRow&gt;
                &lt;grid:StackedHeaderRow.StackedColumns&gt;
                    &lt;grid:StackedColumn ChildColumns=&quot;OrderID,OrderDate&quot; HeaderText=&quot;Order Details&quot; /&gt;
                    &lt;grid:StackedColumn ChildColumns=&quot;Quantity,UnitPrice&quot; HeaderText=&quot;Product Details&quot; /&gt;
                    &lt;grid:StackedColumn ChildColumns=&quot;ShippingCity,ShippingCountry&quot; HeaderText=&quot;Shipping Details&quot; /&gt;
                &lt;/grid:StackedHeaderRow.StackedColumns&gt;
            &lt;/grid:StackedHeaderRow&gt;
        &lt;/dataGrid:SfDataGrid.StackedHeaderRows&gt; 
     &lt;/dataGrid:SfDataGrid&gt;  
                    </x:String>
                    </common:DemoLayout.Xaml>
                    <common:DemoLayout.CSharp>
                        <x:String xml:space="preserve"> 
     //C# code behind
                            
        private void exportingDataGrid_Click(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)
        {
            var options = new DataGridExcelExportingOptions();
            options.ExcelVersion = ExcelVersion.Excel2013;
            options.ExportUnboundRows = ExportUnboundRows.IsChecked == true;
            options.ExportStackedHeaders = ExportStackedHeaders.IsChecked == true;
                            
            if (ColumnStyle.IsChecked == true)
                options.CellsExportHandler = CellsExportHandler;

            if (OrderIDColumn.IsChecked == false)
                options.ExcludedColumns.Add("OrderID");

            if (OrderDateColumn.IsChecked == false)
                options.ExcludedColumns.Add("OrderDate");

            if (ShippingCityColumn.IsChecked == false)
                options.ExcludedColumns.Add("ShippingCity");

            if (ShippingCountryColumn.IsChecked == false)
                options.ExcludedColumns.Add("ShippingCountry");

            if (QuantityColumn.IsChecked == false)
                options.ExcludedColumns.Add("Quantity");

            if (UnitPriceColumn.IsChecked == false)
                options.ExcludedColumns.Add("UnitPrice");

            var excelEngine = sfDataGrid.ExportToExcel(sfDataGrid.View, options);
            var workBook = excelEngine.Excel.Workbooks[0];
            MemoryStream outputStream = new MemoryStream();
            workBook.SaveAs(outputStream);
            Save(outputStream, "OrderDetails");
        }
                            
        private void CellsExportHandler(object sender, DataGridCellExcelExportOptions e)
        {
            if (e.ColumnName == "UnitPrice")
            {
                e.Range.CellStyle.ColorIndex = ExcelKnownColors.Blue_grey;
                e.Range.CellStyle.Font.Color = ExcelKnownColors.Light_yellow;
            }
        }
                            
        private void exportSelectedItems_Click(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)
        {
            var options = new DataGridExcelExportingOptions();
            options.ExcelVersion = ExcelVersion.Excel2013;
            if (CellStyle.IsChecked == true)
                options.GridExportHandler = GridExportHandler;

            var excelEngine = sfDataGrid.ExportToExcel(sfDataGrid.SelectedItems, options);
            var workBook = excelEngine.Excel.Workbooks[0];
            MemoryStream outputStream = new MemoryStream();
            workBook.SaveAs(outputStream);
            Save(outputStream, "SelectedOrders");
        }
                            
        private void GridExportHandler(object sender, DataGridExcelExportStartOptions e)
        {
            if (e.CellType == ExportCellType.RecordCell)
            {
                e.Style.ColorIndex = ExcelKnownColors.Sea_green;
                e.Style.Font.Color = ExcelKnownColors.White;
            }
        }

        async void Save(MemoryStream stream, string filename)
        {
            StorageFile stFile;
            if (!(Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.Phone.UI.Input.HardwareButtons")))
            {
                FileSavePicker savePicker = new FileSavePicker();
                savePicker.DefaultFileExtension = ".xlsx";
                savePicker.SuggestedFileName = filename;
                savePicker.FileTypeChoices.Add("Excel Documents", new List&lt;string&gt;() { ".xlsx" });
                var hwnd = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
                WinRT.Interop.InitializeWithWindow.Initialize(savePicker, hwnd);
                stFile = await savePicker.PickSaveFileAsync();
            }
            else
            {
                StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder;
                stFile = await local.CreateFileAsync(filename, CreationCollisionOption.ReplaceExisting);
            }
            if (stFile != null)
            {
                using (IRandomAccessStream zipStream = await stFile.OpenAsync(FileAccessMode.ReadWrite))
                {
                    //Write compressed data from memory to file
                    using (Stream outstream = zipStream.AsStreamForWrite())
                    {
                        byte[] buffer = stream.ToArray();
                        outstream.Write(buffer, 0, buffer.Length);
                        outstream.Flush();
                    }
                }
                //Launch the saved Excel file
                await Windows.System.Launcher.LaunchFileAsync(stFile);
            }
        }
                            </x:String>
                    </common:DemoLayout.CSharp>
                </common:DemoLayout>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
