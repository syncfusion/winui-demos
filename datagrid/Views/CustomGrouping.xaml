<Page
    x:Class="DataGrid.CustomGrouping"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:DataGrid"
    xmlns:data="using:Syncfusion.UI.Xaml.Data"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:dataGrid="using:Syncfusion.UI.Xaml.DataGrid"
    Background="Transparent"
    mc:Ignorable="d">
    <Page.Resources>
        <local:EmployeeViewModel x:Key="employeeViewModel" />
        <local:CustomSortComparer x:Key="customSortComparer"/>
    </Page.Resources>
    <Grid DataContext="{StaticResource employeeViewModel}">
        <ScrollViewer
            VerticalScrollBarVisibility="Auto"
            VerticalScrollMode="Auto">
            <StackPanel>
                <common:DemoLayout x:Name="Example1" HeaderText="The DataGrid control supports custom grouping, which enables you to implement custom grouping logic if the standard grouping techniques do not meet your requirements.">
                    <common:DemoLayout.Example>
                        <dataGrid:SfDataGrid
                        x:Name="sfDataGrid"
                        Height="510"
                        Width="Auto"
                        HorizontalAlignment="Left"
                        AutoGenerateColumns="False"
                        ColumnWidthMode="Auto"
                        AllowFrozenGroupHeaders="True"
                        GroupCaptionTextFormat=" {ColumnName}: {Key}"
                        ItemsSource="{Binding Employees}"
                        NavigationMode="Row"
                        GridLinesVisibility="Horizontal"
                        ShowColumnWhenGrouped="False">
                            <dataGrid:SfDataGrid.GroupColumnDescriptions>
                                <dataGrid:GroupColumnDescription ColumnName="HireDate" Comparer="{StaticResource customSortComparer}" KeySelector="{Binding KeySelector, Source={StaticResource employeeViewModel}}"/>
                            </dataGrid:SfDataGrid.GroupColumnDescriptions>
                            <dataGrid:SfDataGrid.Columns>
                                <dataGrid:GridNumericColumn TextAlignment="Right" HeaderText="Employee ID" MappingName="EmployeeID" />
                                <dataGrid:GridTextColumn HeaderText="Employee Name" MappingName="Name"/>
                                <dataGrid:GridTextColumn MappingName="Gender" />
                                <dataGrid:GridDateColumn MappingName="BirthDate"
                                                     GroupMode="Display"
                                    HeaderText="Birth Date"
                                    TextAlignment="Right" />
                                <dataGrid:GridTextColumn HeaderText="Designation" MappingName="Title" />
                                <dataGrid:GridDateColumn HeaderText="Hire Date" MappingName="HireDate" TextAlignment="Right" />
                                <dataGrid:GridTextColumn HeaderText="Marital Status" MappingName="MaritalStatus" />
                                <dataGrid:GridNumericColumn MappingName="Salary" NumberFormatter="{Binding SystemCurrency,Source={StaticResource employeeViewModel}}" 
                                TextAlignment="Right"/>
                                <dataGrid:GridTextColumn MappingName="Location" HeaderText="Location" />
                            </dataGrid:SfDataGrid.Columns>
                        </dataGrid:SfDataGrid>
                    </common:DemoLayout.Example>
                    <common:DemoLayout.Xaml>
                        <x:String xml:space="preserve">
    &lt;dataGrid:SfDataGrid x:Name=&quot;sfDataGrid&quot;
                              Height=&quot;500&quot;
                              Width=&quot;Auto&quot;
                              HorizontalAlignment=&quot;Left&quot;
                              ColumnWidthMode=&quot;AutoLastColumnFill&quot;
                              AllowFozenGroupHeaders=&quot;True&quot;
                              GroupCaptionTextFormat=&quot;{ColumnName}: {Key}&quot;
                              ItemsSource=&quot;{Binding Employees}&quot;
                              AutoGenerateColumns=&quot;True&quot;
                              NavigationMode=&quot;Row&quot;
                              ShowColumnWhenGrouped=&quot;False&quot;&gt;
                        &lt;dataGrid:SfDataGrid.GroupColumnDescriptions&gt;
                           &lt;dataGrid:GroupColumnDescription ColumnName=&quot;HireDate&quot; Comparer=&quot;{StaticResource customSortComparer}&quot; KeySelector=&quot;{Binding KeySelector,Source={StaticResource employeeViewModel}}&quot; /&gt;
                        &lt;/dataGrid:SfDataGrid.GroupColumnDescriptions&gt;
    &lt;/dataGrid:SfDataGrid&gt; 
                    </x:String>
                    </common:DemoLayout.Xaml>
                    <common:DemoLayout.CSharp>
                        <x:String xml:space="preserve">
        //C# code behind
        keySelector = (string ColumnName, object o) =>
        {
            var dt = DateTime.Now;
            var item = (o as Employee).HireDate;
            var days = (int)Math.Floor((dt - item).TotalDays);
            var dayOfWeek = (int)dt.DayOfWeek;
            var difference = days - dayOfWeek;
            if (days &lt;= dayOfWeek)
            {
                if (days == 0)
                    return &quot;TODAY&quot;;
                if (days == 1)
                    return &quot;YESTERDAY&quot;;
                return item.Date.DayOfWeek.ToString().ToUpper();
            }
            if (difference &gt; 0 &amp;&amp; difference &lt;= 7)
                return &quot;LAST WEEK&quot;;
            if (difference &gt; 7 &amp;&amp; difference &lt;= 14)
                return &quot;TWO WEEKS AGO&quot;;
            if (difference &gt; 14 &amp;&amp; difference &lt;= 21)
                return &quot;THREE WEEKS AGO&quot;;
            if (dt.Year == item.Date.Year &amp;&amp; dt.Month == item.Date.Month)
                return &quot;EARLIER THIS MONTH&quot;;
            if (DateTime.Now.AddMonths(-1).Month == item.Date.Month)
                return &quot;LAST MONTH&quot;;
            return &quot;OLDER&quot;;
        };
                    
        private Func&lt;string, object, object&gt;keySelector;

        public Func&lt;string, object, object&gt;KeySelector
        {
            get
            {
                return keySelector;
            }
            set
            {
                keySelector = value;
            }
        }
                    
        public class CustomSortComparer : IComparer&lt;object&gt;
        {
            private int ConvertKeyToInt(string Key)
            {
                DayOfWeek dayOfWeek;
                if (Key.Equals(&quot;TODAY&quot;))
                    return 0;
                else if (Key.Equals(&quot;YESTERDAY&quot;))
                    return 1;

                if (Enum.TryParse(Key, true, out dayOfWeek))
                    return ((int)dayOfWeek * -1) + 7 + 2;
                else if (Key.Equals(&quot;LAST WEEK&quot;))
                    return 10;
                else if (Key.Equals(&quot;TWO WEEKS AGO&quot;))
                    return 11;
                else if (Key.Equals(&quot;THREE WEEKS AGO&quot;))
                    return 12;
                else if (Key.Equals(&quot;EARLIER THIS MONTH&quot;))
                    return 13;
                else if (Key.Equals("LAST MONTH"))
                    return 14;
                else if (Key.Equals("OLDER"))
                    return 15;
                return 0;
            }

            public int Compare(object x, object y)
            {
                //Sorting groups
                if (x.GetType() == typeof(Group))
                {
                    int key1, key2;
                    key1 = this.ConvertKeyToInt((x as Group).Key.ToString());
                    key2 = this.ConvertKeyToInt((y as Group).Key.ToString());
                    return key1.CompareTo(key2);
                }
                return 0;
              
            }
        }                   
                        </x:String>
                    </common:DemoLayout.CSharp>
                </common:DemoLayout>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
