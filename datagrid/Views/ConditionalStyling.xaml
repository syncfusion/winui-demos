<Page
    x:Class="DataGrid.Conditionalstyling"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="using:Syncfusion.DemosCommon.WinUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:DataGrid"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:dataGrid="using:Syncfusion.UI.Xaml.DataGrid"
    Background="Transparent"
    mc:Ignorable="d">
    <Page.Resources>
        <local:SalesViewModel x:Key="salesViewModel"/>         
        <local:CustomCellStyleSelector x:Key="cellStyleSelector"/>
        <Style x:Key="darkRedCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#f50602"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="redCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#e37b64"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightRedCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#f07d9b"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="darkYellowCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#fcca03"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="yellowCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#f0e090"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightYellowCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#f5e6b5"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="darkVioletCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#6f0e82"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="violetCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#b464c4"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightVioletCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#e4b4ed"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style> 
        <Style x:Key="greenCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#50bf65"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="lightGreenCellStyle" TargetType="dataGrid:GridCell">
            <Setter Property="Background" Value="#99f2b4"/>
            <Setter Property="Foreground" Value="Black"/> 
        </Style> 
    </Page.Resources>
    <StackPanel DataContext="{StaticResource salesViewModel}">
        <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto">
            <common:DemoLayout x:Name="Example1" HeaderText="This sample showcases the conditional formatting capability of the DataGrid. You can format the styles of cells based on certain conditions by using StyleSelector.">
                <common:DemoLayout.Example>
                    <dataGrid:SfDataGrid 
                                   x:Name="sfDataGrid" 
                                   Height="450"
                                   Width="Auto"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   AutoGenerateColumns="False" 
                                   ColumnWidthMode="Auto"
                                   CellStyleSelector="{StaticResource cellStyleSelector}"
                                   ItemsSource="{Binding YearlySales}"
                                   GridLinesVisibility="Both"> 
                        <dataGrid:SfDataGrid.Columns>
                            <dataGrid:GridTextColumn MappingName="Name" />
                            <dataGrid:GridNumericColumn MappingName="QS1" NumberFormatter="{Binding SystemCurrency,Source={StaticResource salesViewModel}}" HeaderText="Sales in Q1" TextAlignment="Right" />
                            <dataGrid:GridNumericColumn MappingName="QS2" NumberFormatter="{Binding SystemCurrency,Source={StaticResource salesViewModel}}" HeaderText="Sales in Q2" TextAlignment="Right" />
                            <dataGrid:GridNumericColumn MappingName="QS3" NumberFormatter="{Binding SystemCurrency,Source={StaticResource salesViewModel}}" HeaderText="Sales in Q3" TextAlignment="Right" />
                            <dataGrid:GridNumericColumn MappingName="QS4" NumberFormatter="{Binding SystemCurrency,Source={StaticResource salesViewModel}}" HeaderText="Sales in Q4" TextAlignment="Right" />
                            <dataGrid:GridNumericColumn MappingName="Total" NumberFormatter="{Binding SystemCurrency,Source={StaticResource salesViewModel}}" HeaderText="Total Sales" TextAlignment="Right" />
                            <dataGrid:GridNumericColumn MappingName="Year" TextAlignment="Right"/>
                        </dataGrid:SfDataGrid.Columns>
                    </dataGrid:SfDataGrid>
                </common:DemoLayout.Example>
                
                <common:DemoLayout.Xaml>
                    <x:String xml:space="preserve"> 
     &lt;Page.Resources>&gt; 
        &lt;local:CustomCellStyleSelector x:Key=&quot;cellStyleSelector&quot; /&gt;
        &lt;Style x:Key=&quot;darkRedCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f50602&quot;/&gt;
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;redCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#e37b64&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightRedCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f07d9b&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;darkYellowCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#fcca03&quot;/&gt;
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;yellowCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f0e090&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightYellowCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#f5e6b5&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt; 
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;darkVioletCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#6f0e82&quot;/&gt;
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;violetCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#b464c4&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;      
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightVioletCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#e4b4ed&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;greenCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#50bf65&quot;/&gt;  
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
        &lt;/Style&gt;
        &lt;Style x:Key=&quot;lightGreenCellStyle&quot; TargetType=&quot;dataGrid:GridCell&quot;&gt;
            &lt;Setter Property=&quot;Background&quot; Value=&quot;#99f2b4&quot;/&gt; 
            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt; 
        &lt;/Style&gt;
     &lt;/Page.Resources&gt;  
      &lt;dataGrid:SfDataGrid x:Name=&quot;sfDataGrid&quot; 
                                  Height=&quot;450&quot;
                                  Width=&quot;Auto&quot;
                                  HorizontalAlignment=&quot;Left&quot;
                                  VerticalAlignment=&quot;Top&quot;
                                  AutoGenerateColumns=&quot;True&quot; 
                                  ColumnWidthMode=&quot;Auto&quot;
                                  CellStyleSelector=&quot;{StaticResource styleSelector}&quot;
                                  ItemsSource=&quot;{Binding YearlySales}&quot;
                                  GridLinesVisibility=&quot;Both&quot; /&gt; 
                    </x:String>
                </common:DemoLayout.Xaml>
                <common:DemoLayout.CSharp>
                    <x:String xml:space="preserve">
    // C# Code behind 
    public class CustomCellStyleSelector : StyleSelector
    {
        internal Conditionalstyling conditionalStyling;
        protected override Style SelectStyleCore(object item, DependencyObject container)
        {
            var data = item as Sales;

            if (conditionalStyling == null)
                conditionalStyling = (Conditionalstyling)Activator.CreateInstance(typeof(Conditionalstyling));

            if (data != null)
            {
                var mappingName = (container as GridCell).ColumnBase.GridColumn.MappingName;

                if (mappingName == &quot;QS1&quot;)
                    return SelectStyle(data.QS1);
                else if (mappingName == &quot;QS2&quot;)
                    return SelectStyle(data.QS2);
                else if (mappingName == &quot;QS3&quot;)
                    return SelectStyle(data.QS3);
                else if (mappingName == &quot;QS4&quot;)
                    return SelectStyle(data.QS4);
            }
            return base.SelectStyleCore(item, container);
        }

        private Style SelectStyle(double value)
        {
            if (value &lt; 1000)
                return conditionalStyling.Resources[&quot;darkRedCellStyle&quot;] as Style;
            else if (value &gt;= 1000 &amp;&amp; value &lt; 2000)
                return conditionalStyling.Resources[&quot;redCellStyle&quot;] as Style;
            else if (value &gt;= 2000 &amp;&amp; value &lt; 3000)
                return conditionalStyling.Resources[&quot;lightRedCellStyle&quot;] as Style;
            else if (value &gt;= 3000 &amp;&amp; value &lt; 4000)
                return conditionalStyling.Resources[&quot;darkYellowCellStyle&quot;] as Style;
            else if (value &gt;= 4000 &amp;&amp; value &lt; 5000)
                return conditionalStyling.Resources[&quot;yellowCellStyle&quot;] as Style;
            else if (value &gt;= 5000 &amp;&amp; value &lt; 6000)
                return conditionalStyling.Resources[&quot;lightYellowCellStyle&quot;] as Style;
            else if (value &gt;= 6000 &amp;&amp; value &lt; 7000)
                return conditionalStyling.Resources[&quot;darkVioletCellStyle&quot;] as Style;
            else if (value &gt;= 7000 &amp;&amp; value &lt; 8000)
                return conditionalStyling.Resources[&quot;violetCellStyle&quot;] as Style;
            else if (value &gt;= 8000 &amp;&amp; value &lt; 9000)
                return conditionalStyling.Resources[&quot;lightVioletCellStyle&quot;] as Style;
            else if (value &gt;= 9000 &amp;&amp; value &lt; 10000)
                return conditionalStyling.Resources[&quot;greenCellStyle&quot;] as Style;
            else 
                return conditionalStyling.Resources[&quot;lightGreenCellStyle&quot;] as Style; 
        }
    }
                </x:String>
                </common:DemoLayout.CSharp>
            </common:DemoLayout>
        </ScrollViewer>
    </StackPanel>
</Page>
